#!/usr/bin/python3
#	espclock - ESP-based dot matrix clock with NTP synchronization
#	Copyright (C) 2020-2021 Johannes Bauer
#
#	This file is part of espclock.
#
#	espclock is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	espclock is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with espclock; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import json
import subprocess
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser(description = "Installation of the espclock project onto an ESP32.")
parser.add_argument("-c", "--config-file", metavar = "filename", type = str, default = "push_config.json", help = "Specifies configuration file to use. Defaults to %(default)s.")
parser.add_argument("-r", "--reboot", action = "store_true", help = "Reboot device after pushing files.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("target", nargs = "*", help = "Target(s) to install. Defaults to 'all' if not given.")
args = parser.parse_args(sys.argv[1:])

with open(args.config_file) as f:
	config = json.load(f)

if len(args.target) == 0:
	targets = [ "all" ]
else:
	targets = args.target

for target in targets:
	filenames = config["install"][target]
	for filename in filenames:
		print("Pushing file: %s" % (filename))
		subprocess.check_call([ "webreplcmd", "--host", config["device_host"], "--password", config["webrepl_pass"], "put", filename, filename ])
if args.reboot:
	print("Rebooting device...")
	subprocess.check_call([ "webreplcmd", "--host", config["device_host"], "--password", config["webrepl_pass"], "cmd", "import machine; machine.reset()" ])
